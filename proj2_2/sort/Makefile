# We start you off with rotate1.  Add more targets as you implement
# them.  Eventually, you want TARGETS to contain all of the following:
#
#   TARGETS := rotate1 rotate2 rotate3 rotate4 rotate5 rotate
#
TARGETS := sort1 sort2

###################################
# No need to edit below this line #
###################################

TARGETS32 := $(TARGETS:%=%.32)
TARGETS64 := $(TARGETS:%=%.64)

ifeq ($(shell uname -m),i686) 
        ALLTARGETS := $(TARGETS32)
else
        ALLTARGETS := $(TARGETS64)
endif

LOCKER=/afs/csail/proj/courses/6.172
ifneq ($(shell uname -o),Cygwin)
  CC := $(LOCKER)/bin/gcc
else
  CC := gcc
endif
CFLAGS := -g -Werror
LDFLAGS := -lrt -lm
COMMON_SRC := testbed.c ktiming.c
COMMON_HEADERS := ktiming.c

OLDMODE := $(shell cat .buildmode 2> /dev/null)
ifeq ($(DEBUG),1)
CFLAGS := -DDEBUG -O0 $(CFLAGS)
ifneq ($(OLDMODE),debug)
$(shell echo debug > .buildmode)
endif
else
CFLAGS := -O2 $(CFLAGS)
ifneq ($(OLDMODE),nodebug)
$(shell echo nodebug > .buildmode)
endif
endif

# make all targets specified
all: $(ALLTARGETS)

# pattern rule for building 32-bit targets
%.32: %.c $(COMMON_SRC) $(COMMON_HEADERS) .buildmode
	$(CC) $(CFLAGS) $(LDFLAGS) -m32 -msse3 $< $(COMMON_SRC) -o $@

# pattern rule for building 64-bit targets
%.64: %.c $(COMMON_SRC) $(COMMON_HEADERS) .buildmode
	$(CC) $(CFLAGS) $(LDFLAGS) -m64 $< $(COMMON_SRC) -o $@

# run each of the targets on inputs 2047, 2048, and 2049
run: $(ALLTARGETS)
	for X in $(ALLTARGETS) ; do \
		echo $$X ; \
		./$$X 2047 10000; \
		./$$X 2048 10000; \
		./$$X 2049 10000; \
		echo ; \
	done

# remove targets as well as output generated by PNQ
clean:
	rm -f $(ALLTARGETS) *.std*
